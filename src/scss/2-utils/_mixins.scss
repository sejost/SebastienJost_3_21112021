@use "vars" as *;

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-horicenter {
  display: flex;
  justify-content: center;
}

@mixin flex-verticenter {
  display: flex;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin shadow-box {
  box-shadow: 4px 4px 5px 1px rgba(0, 0, 0, 0.25);
}

@mixin shadow-box-over {
  box-shadow: 5px 5px 8px 4px rgba(0, 0, 0, 0.35);
}

@mixin shadow-text {
  text-shadow: 0px 5px 5px rgba(0, 0, 0, 0.5);
}

@mixin background-gradient {
  background: linear-gradient(
    175deg,
    $colour-reddishMagenta 10%,
    $colour-mediumPurple 50%
  );
}

@mixin text-gradient {
  background: $colour-mediumPurple;
  background: -webkit-linear-gradient(
    175deg,
    $colour-reddishMagenta 10%,
    $colour-mediumPurple 100%
  );
  background: -moz-linear-gradient(
    175deg,
    $colour-reddishMagenta 10%,
    $colour-mediumPurple 100%
  );
  background: linear-gradient(
    175deg,
    $colour-reddishMagenta 10%,
    $colour-mediumPurple 100%
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin respond($device) {
  $bp: map-get($breakpoints, $device);
  @media only screen and (min-width: $bp) {
    @content;
  }
}

@mixin transition($props...) {
  $result: ();

  @for $i from 1 through length($props) {
    $prop: nth($props, $i);
    $result: append($result, $prop);
    $result: append($result, ease-in-out 0.2s);

    @if $i != length($props) {
      $result: append(
        $result,
        unquote(
          $string: ",",
        )
      );
    }
  }

  transition: $result;
}
